/*@

inductive list<t> = nil | cons(t, list<t>);

fixpoint t head<t>(list<t> xs) {
    switch (xs) {
        case nil: return default_value<t>;
        case cons(x, xs0): return x;
    }
}

fixpoint list<t> tail<t>(list<t> xs) {
    switch (xs) {
        case nil: return nil;
        case cons(x, xs0): return xs0;
    }
}

fixpoint int length<t>(list<t> xs) {
    switch (xs) {
        case nil: return 0;
        case cons(x, xs0): return 1 + length(xs0);
    }
}

lemma_auto void length_nonnegative<t>(list<t> xs);
    requires true;
    ensures length(xs) >= 0;

fixpoint list<t> append<t>(list<t> xs, list<t> ys) {
    switch (xs) {
        case nil: return ys;
        case cons(x, xs0): return cons(x, append(xs0, ys));
    }
}

lemma_auto void append_nil<t>(list<t> xs);
    requires true;
    ensures append(xs, nil) == xs;

lemma void append_assoc<t>(list<t> xs, list<t> ys, list<t> zs);
    requires true;
    ensures append(append(xs, ys), zs) == append(xs, append(ys, zs));
    
lemma void length_append<t>(list<t> xs, list<t> ys);
  requires true;
  ensures length(append(xs, ys)) == length(xs) + length(ys);


fixpoint list<t> reverse<t>(list<t> xs) {
    switch (xs) {
        case nil: return nil;
        case cons(x, xs0): return append(reverse(xs0), cons(x, nil));
    }
}

lemma void reverse_append<t>(list<t> xs, list<t> ys);
    requires true;
    ensures reverse(append(xs, ys)) == append(reverse(ys), reverse(xs));

lemma_auto void reverse_reverse<t>(list<t> xs);
    requires true;
    ensures reverse(reverse(xs)) == xs;

fixpoint boolean mem<t>(t x, list<t> xs) {
    switch (xs) {
        case nil: return false;
        case cons(x0, xs0): return x == x0 || mem(x, xs0);
    }
}

fixpoint t nth<t>(int n, list<t> xs) {
    switch (xs) {
        case nil: return default_value<t>;
        case cons(x, xs0): return n == 0 ? x : nth(n - 1, xs0);
    }
}

fixpoint list<t> store<t>(list<t> xs, int index, t v) {
  switch(xs) {
    case nil: return xs;
    case cons(h, t): return index == 0 ? cons(v, t) : cons(h, store(t, index - 1, v)); 
  }
}



lemma_auto(mem(nth(n, xs), xs)) void mem_nth<t>(int n, list<t> xs);
    requires 0 <= n && n < length(xs);
    ensures mem(nth(n, xs), xs) == true;

lemma_auto(nth(0, vs)) void nth_zero<t>(list<t> vs);
    requires true;
    ensures nth(0, vs) == head(vs);

lemma_auto(mem(x, append(xs, ys))) void mem_append<t>(list<t> xs, list<t> ys, t x);
    requires true;
    ensures mem(x, append(xs, ys)) == (mem(x, xs) || mem(x, ys));

fixpoint boolean distinct<t>(list<t> xs) {
    switch (xs) {
        case nil: return true;
        case cons(x, xs0): return !mem(x, xs0) && distinct(xs0);
    }
}

fixpoint list<t> take<t>(int n, list<t> xs) {
    switch (xs) {
        case nil: return nil;
        case cons(x, xs0): return n == 0 ? nil : cons(x, take(n - 1, xs0));
    }
}

lemma_auto void take_0<t>(list<t> xs);
    requires true;
    ensures take(0, xs) == nil;

lemma_auto(take(length(xs), xs)) void take_length<t>(list<t> xs);
    requires true;
    ensures take(length(xs), xs) == xs;

lemma void length_take<t>(int n, list<t> xs);
    requires 0 <= n && n <= length(xs);
    ensures length(take(n, xs)) == n;

lemma_auto(length(take(n, xs))) void length_take_n<t>(int n, list<t> xs);
    requires 0 <= n && n <= length(xs);
    ensures length(take(n, xs)) == n;

lemma_auto(nth(i, take(n, xs))) void nth_take<t>(int i, int n, list<t> xs);
    requires 0 <= i && i < n && n <= length(xs);
    ensures nth(i, take(n, xs)) == nth(i, xs);

fixpoint list<t> drop<t>(int n, list<t> xs) {
    switch (xs) {
        case nil: return nil;
        case cons(x, xs0): return n == 0 ? xs : drop(n - 1, xs0);
    }
}

lemma_auto void drop_0<t>(list<t> xs);
    requires true;
    ensures drop(0, xs) == xs;

lemma void drop_n_plus_one<t>(int n, list<t> xs);
    requires 0 <= n &*& n < length(xs);
    ensures drop(n, xs) == cons(nth(n, xs), drop(n + 1, xs));

lemma_auto(drop(length(xs), xs)) void drop_length<t>(list<t> xs);
    requires true;
    ensures drop(length(xs), xs) == nil;

lemma void length_drop<t>(int n, list<t> xs);
    requires 0 <= n && n <= length(xs);
    ensures length(drop(n, xs)) == length(xs) - n;

lemma_auto(drop(n, take(n, xs))) void drop_n_take_n<t>(int n, list<t> xs);
    requires true;
    ensures drop(n, take(n, xs)) == nil;
    
lemma_auto(append(take(n, xs), drop(n, xs))) void append_take_drop<t>(int n, list<t> xs);
    requires 0 <= n && n < length(xs);
    ensures append(take(n, xs), drop(n, xs)) == xs;

lemma_auto void nth_drop<t>(list<t> vs, int i);
    requires 0 <= i && i < length(vs);
    ensures nth(i, vs) == head(drop(i, vs));

lemma_auto void nth_drop0<t>(int n, int m, list<t> xs);
    requires 0 <= n && 0 <= m;
    ensures nth(n, drop(m, xs)) == nth(n + m, xs);

fixpoint list<t> remove<t>(t x, list<t> xs) {
    switch (xs) {
        case nil: return nil;
        case cons(x0, xs0): return x0 == x ? xs0 : cons(x0, remove(x, xs0));
    }
}


fixpoint list<t> remove_nth<t>(int n, list<t> xs) {
    switch(xs) {
        case nil: return nil;
        case cons(h, t): return n == 0 ? t : cons(h, remove_nth(n - 1, t));
    }
}

fixpoint list<t> remove_every<t>(t x, list<t> xs)
{
  switch(xs) {
    case nil: return nil;
    case cons(h, t): return h == x ? remove_every(x, t) : cons(h, remove_every(x, t));
  }
}

fixpoint list<t> remove_all<t>(list<t> xs, list<t> ys) {
    switch (xs) {
        case nil: return ys;
        case cons(x, xs0): return remove(x, remove_all(xs0, ys));
    }
}

lemma void drop_take_remove_nth<t>(list<t> xs, int n);
    requires 0 <= n && n < length(xs);
    ensures append(take(n, xs), tail(drop(n, xs))) == remove_nth(n, xs);

lemma void remove_nth_take_drop<t>(list<t> xs, int n);
    requires 0 <= n && n < length(xs);
    ensures remove_nth(n, xs) == append(take(n, xs), drop(n + 1, xs));

fixpoint int index_of<t>(t x, list<t> xs) {
    switch (xs) {
        case nil: return 0;
        case cons(x0, xs0): return x0 == x ? 0 : 1 + index_of(x, xs0);
    }
}

lemma_auto void index_of_nonnegative<t>(t x, list<t> xs);
    requires true;
    ensures 0 <= index_of(x, xs);

lemma void mem_index_of<t>(t x, list<t> xs);
    requires mem(x, xs) == true;
    ensures 0 <= index_of(x, xs) &*& index_of(x, xs) < length(xs);

predicate foreach<t>(list<t> xs, predicate(t) p) =
    switch (xs) {
        case nil: return true;
        case cons(x, xs0): return p(x) &*& foreach(xs0, p);
    };

lemma void foreach_remove<t>(t x, list<t> xs);
    requires foreach(xs, ?p) &*& mem(x, xs) == true;
    ensures foreach(remove(x, xs), p) &*& p(x);

lemma void foreach_unremove<t>(t x, list<t> xs);
    requires foreach(remove(x, xs), ?p) &*& mem(x, xs) == true &*& p(x);
    ensures foreach(xs, p);

lemma void foreach_append<t>(list<t> xs, list<t> ys);
    requires foreach(xs, ?p) &*& foreach(ys, p);
    ensures foreach(append(xs, ys), p);

predicate foreachp<t>(list<t> xs, predicate(t;) p;) =
    switch (xs) {
        case nil: return true;
        case cons(x, xs0): return p(x) &*& foreachp(xs0, p);
    };

lemma void foreachp_remove<t>(t x, list<t> xs);
    requires [?f]foreachp(xs, ?p) &*& mem(x, xs) == true;
    ensures [f]foreachp(remove(x, xs), p) &*& [f]p(x);

lemma void foreachp_unremove<t>(t x, list<t> xs);
    requires [?f]foreachp(remove(x, xs), ?p) &*& mem(x, xs) == true &*& [f]p(x);
    ensures [f]foreachp(xs, p);

lemma void foreachp_append<t>(list<t> xs, list<t> ys);
    requires [?f]foreachp(xs, ?p) &*& [f]foreachp(ys, p);
    ensures [f]foreachp(append(xs, ys), p);

fixpoint boolean all_eq<t>(list<t> xs, t x0) {
    switch (xs) {
        case nil: return true;
        case cons(x, xs0): return x == x0 && all_eq(xs0, x0);
    }
}

lemma_auto(all_eq(append(xs1, xs2), x0)) void all_eq_append<t>(list<t> xs1, list<t> xs2, t x0);
    requires true;
    ensures all_eq(append(xs1, xs2), x0) == (all_eq(xs1, x0) && all_eq(xs2, x0));

lemma_auto(all_eq(drop(i, xs), x0)) void all_eq_drop<t>(int i, list<t> xs, t x0);
    requires all_eq(xs, x0) && 0 <= i && i <= length(xs);
    ensures all_eq(drop(i, xs), x0) == true;

lemma_auto(nth(i, xs)) void all_eq_nth(list<int> xs, int i);
    requires all_eq(xs, 0) == true && 0 <= i && i < length(xs);
    ensures nth(i, xs) == 0;

lemma_auto(drop(length(xs1), append(xs1, xs2))) void drop_append<t>(list<t> xs1, list<t> xs2);
    requires true;
    ensures drop(length(xs1), append(xs1, xs2)) == xs2;
	
lemma void foreach_remove_nth<t>(int i, list<t> xs);
    requires foreach(xs, ?p) &*& 0 <= i &*& i < length(xs);
    ensures p(nth<t>(i, xs)) &*& foreach(remove_nth<t>(i, xs), p);

lemma void foreach_unremove_nth<t>(int i, list<t> xs);
    requires foreach(remove_nth<t>(i, xs), ?p) &*& p(nth<t>(i, xs));
    ensures foreach(xs, p);
    
lemma_auto(length(xs)) void length_nul<t>(list<t> xs);
    requires length(xs) == 0;
    ensures xs == nil;

fixpoint list<t> update<t>(int i, t y, list<t> xs) {
    switch (xs) {
        case nil: return nil;
        case cons(x, xs0): return i == 0 ? cons(y, xs0) : cons(x, update(i - 1, y, xs0));
    }
}

lemma void append_take_nth_drop<t>(int i, list<t> xs);
  requires 0 <= i && i < length(xs);
  ensures xs == append(take(i, xs), cons(nth(i, xs), drop(i + 1, xs)));

lemma_auto(update(i, v, xs)) void update_eq_append_cons_drop<t>(int i, t v, list<t> xs);
  requires 0 <= i && i < length(xs);
  ensures update(i, v, xs) == append(take(i, xs), cons(v, drop(i + 1, xs)));

lemma_auto(nth(i, update(j, y, xs))) void nth_update<t>(int i, int j, t y, list<t> xs);
  requires 0 <= i && i < length(xs) && 0 <= j && j < length(xs);
  ensures nth(i, update(j, y, xs)) == (i == j ? y : nth(i, xs));
    
lemma_auto(length(update(i, y, xs))) void length_update<t>(int i, t y, list<t> xs);
  requires true;
  ensures length(update(i, y, xs)) == length(xs);

lemma void take_one_more<t>(int i, list<t> xs);
  requires 0 <= i &*& i < length(xs);
  ensures take(i + 1, xs) == append(take(i, xs), cons(nth(i, xs), nil));

lemma_auto(take(j, update(i, v, xs))) void take_update<t>(t v, int i, list<t> xs, int j);
  requires 0 <= i && i < length(xs) && 0 <= j && j <= i;
  ensures take(j, xs) == take(j, update(i, v, xs));

lemma void remove_remove_nth<t>(t x, list<t> xs);
    requires true;
    ensures remove(x, xs) == remove_nth(index_of(x, xs), xs);

lemma void index_of_nth<t>(int i, list<t> xs);
    requires 0 <= i &*& i < length(xs);
    ensures index_of(nth(i, xs), xs) <= i;

lemma void nth_index_of<t>(t x, list<t> xs);
    requires index_of(x, xs) < length(xs);
    ensures nth(index_of(x, xs), xs) == x;

lemma void mem_remove_eq<t>(t x, list<t> xs);
    requires true;
    ensures mem(x, xs) != (remove(x, xs) == xs);

fixpoint boolean forall<t>(list<t> xs, fixpoint(t, boolean) p) {
    switch (xs) {
        case nil: return true;
        case cons(x0, xs0): return p(x0) && forall(xs0, p);
    }
}

lemma void forall_append<t>(list<t> xs, list<t> ys, fixpoint(t, boolean) p);
    requires true;
    ensures forall(append(xs, ys), p) == (forall(xs, p) && forall(ys, p));

lemma void drop_drop<t>(int m, int n, list<t> xs);
    requires 0 <= m && 0 <= n && m + n <= length(xs);
    ensures drop(m, drop(n, xs)) == drop(m + n, xs);

lemma_auto void nth_append_left<t>(int n, list<t> xs, list<t> ys);
    requires 0 <= n && n < length(xs);
    ensures nth(n, append(xs, ys)) == nth(n, xs);

lemma_auto void nth_append_right<t>(int n, list<t> xs, list<t> ys);
    requires length(xs) <= n;
    ensures nth(n, append(xs, ys)) == nth(n - length(xs), ys);

@*/
