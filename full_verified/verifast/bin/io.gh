#ifndef IO_IO_H
#define IO_IO_H
/**
 * io.gh - input/output fundamental predicate and lemma declarations.
 *
 * This file is the simplified version; it is not suitable for memory-based
 * input/output (i.e. input/output-style contracts for programs doing
 * memory-based operations).
 */



inductive place = place(int);

/**
 * Expresses that place t has a token. Tokens can move from place to
 * place by performing I/O actions.
 */
predicate token(place t);

/**
 * Expresses the permission to split one token in two tokens.
 * Example specification:
 *   token(?t1) &*& split(t1, ?t_left, ?t_right)
 *   &*& action1_io(t_left, ?t_left2)
 *   &*& action2_io(t_right, ?t_right2)
 *   &*& join(t_left2, t_right2, ?t3)
 *   &*& action3_io(t3, ?t4)
 * The action action1_io and action2_io can be executed in
 * any ordering or parallel. Note that if action1_io and action2_io
 * consists of actions, the actions of action1_io can be interleaved
 * in any way with the actions of action2_io.
 *
 * Join expresses the permission to join two tokens into one token.
 * In the above example, action3_io can only be executed if
 * both action1_io and action2_io are finished.
 */
predicate split(place t1; place t2, place t3);

/**
 * See: the split predicate.
 */
predicate join(place t1, place t2; place t3);

lemma void join();
    requires join(?t1, ?t2, ?t3)
        &*& token(t1) &*& token(t2);
    ensures token(t3);

/**
 * Like the lemma join(), but prevents consuming the wrong join permission.
 */
lemma void join_specific(place t1);
    requires join(t1, ?t2, ?t3)
        &*& token(t1) &*& token(t2);
    ensures token(t3);

lemma void split();
    requires split(?t1, ?t2, ?t3) &*& token(t1);
    ensures token(t2) &*& token(t3);

lemma void split_specific(place t1);
    requires split(t1, ?t2, ?t3) &*& token(t1);
    ensures token(t2) &*& token(t3);

/**
 * Permission to do nothing.
 * This is useful to make I/O optional:
 * In the following precondition, some_io is optional, i.e. the
 * program is allowed to not perform I/O:
 *   token(?t1) &*& no_op(t1, ?t2) &*& some_io(t1, t2)
 */
predicate no_op(place t1, place t2;);

/**
 * Performs the no_op I/O action,
 * i.e. "moves" from place t1 to t2 if given permission.
 *
 * Note that this is not the same as asserting t1==t2.
 * Example:
 *   some_io(t1, t2) &*& other_io(t1, t2) &*& no_op(t1, t2)
 *   This expresses that the program must do either
 *   some_io, other_io, or nothing.
 *
 *   some_io(t1, t2) &*& other_io(t1, t2) &*& t1==t2
 *   This expresses that the program must do either
 *   some_io, other_io, nothing, or
 *   some_io followed by other_io, or other_io followed by some_io.
 * 
 */
lemma void no_op();
requires no_op(?t1, ?t2) &*& token(t1);
ensures token(t2);

#endif
