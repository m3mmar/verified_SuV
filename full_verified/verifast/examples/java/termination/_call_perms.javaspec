/*@

/**** Multiset order *****/

// Multisets are encoded as lists

fixpoint boolean exists<t>(list<t> xs, fixpoint(t, boolean) p) {
    switch (xs) {
        case nil: return false;
        case cons(x, xs0): return p(x) || exists(xs0, p);
    }
}

fixpoint boolean lt_some<t>(fixpoint(t, t, boolean) lt, list<t> ys, t x) {
    return exists(ys, (lt)(x));
}

fixpoint boolean all_lt_some<t>(fixpoint(t, t, boolean) lt, list<t> xs, list<t> ys) {
    return forall(xs, (lt_some)(lt, ys));
}

fixpoint boolean bag_le<t>(fixpoint(t, t, boolean) lt, list<t> xs, list<t> ys) {
    return ys == xs || all_lt_some(lt, remove_all(ys, xs), remove_all(xs, ys)) == true;
}

fixpoint boolean bag_lt<t>(fixpoint(t, t, boolean) lt, list<t> xs, list<t> ys) {
    return bag_le(lt, xs, ys) && remove_all(xs, ys) != nil;
}

/**** Order on method bags ****/

fixpoint boolean level_le(list<Class> level1, list<Class> level2) { return bag_le(Class_lt, level1, level2); }

fixpoint boolean level_lt(list<Class> level1, list<Class> level2) { return bag_lt(Class_lt, level1, level2); }

lemma_auto void level_le_cons0(Class c, list<Class> cs);
    requires true;
    ensures level_le({c}, cons(c, cs)) == true;

lemma_auto void level_lt_cons(Class c, list<Class> cs);
    requires true;
    ensures level_lt(cs, cons(c, cs)) == true;

lemma void level_cons_mono(Class c, list<Class> level1, list<Class> level2);
    requires level_le(level1, level2) == true;
    ensures level_le(cons(c, level1), cons(c, level2)) == true;

lemma void level_cons_mono_l(Class c1, Class c2, list<Class> level);
    requires Class_lt(c1, c2) == true;
    ensures level_lt(cons(c1, level), cons(c2, level)) == true;

lemma void level_le_trans(list<Class> level1, list<Class> level2, list<Class> level3);
    requires level_le(level1, level2) && level_le(level2, level3);
    ensures level_le(level1, level3) == true;

/**** level_max ****/

fixpoint list<Class> level_max(list<Class> level1, list<Class> level2);

// Note that if level1 and level2 are equivalent but not equal (i.e. they are permutations) then level_max picks its second argument, not its first.

lemma void level_max_def(list<Class> level1, list<Class> level2);
    requires true;
    ensures level_max(level1, level2) == (level_le(level1, level2) ? level2 : level1);

lemma_auto(level_max(level1, level2)) void level_le_max(list<Class> level1, list<Class> level2);
    requires true;
    ensures level_le(level1, level_max(level1, level2)) && level_le(level2, level_max(level1, level2));

lemma void level_max_le(list<Class> level1, list<Class> level2, list<Class> level3);
    requires level_le(level1, level3) && level_le(level2, level3);
    ensures level_le(level_max(level1, level2), level3) == true;

lemma_auto(level_max(level, level)) void level_max_same(list<Class> level);
    requires true;
    ensures level_max(level, level) == level;

/**** append (= multiset union) ****/

lemma void level_le_append_l(list<Class> level1, list<Class> level2);
    requires true;
    ensures level_le(level1, append(level1, level2)) == true;
    
lemma void level_le_append_r(list<Class> level1, list<Class> level2);
    requires true;
    ensures level_le(level2, append(level1, level2)) == true;

lemma void level_append_mono_l(list<Class> level1, list<Class> level2, list<Class> level3);
    requires level_le(level1, level2) == true;
    ensures level_le(append(level1, level3), append(level2, level3)) == true;

lemma void level_le_append_flip(list<Class> level1, list<Class> level2);
    requires true;
    ensures level_le(append(level1, level2), append(level2, level1)) == true;

/**** Call permissions ****/

predicate call_perm(list<Class> level;);

lemma void call_perm_weaken_and_dup(real frac);
    requires call_perm(cons(_, ?level)) &*& 0 < frac;
    ensures [frac]call_perm(level);

lemma void call_perm_weaken(real frac, list<Class> level);
    requires [frac]call_perm(?level0) &*& level_le(level, level0) == true;
    ensures [frac]call_perm(level);

lemma void consume_call_perm_for(Class c);
    requires call_perm(?level) &*& level_le({c}, level) == true;
    ensures call_perm_(c);

lemma void call_below_perm__elim(real frac, list<Class> level);
    requires call_below_perm_(?c) &*& level_lt(level, {c}) == true &*& 0 < frac;
    ensures [frac]call_perm(level);

/**** Well-founded relations ****/

fixpoint boolean is_lesser_element<t>(fixpoint(t, boolean) set, fixpoint(t, t, boolean) lt, t x, t y) {
    return set(y) && lt(y, x);
}

fixpoint boolean is_minimal<t>(fixpoint(fixpoint(t, boolean), boolean) forall_t, fixpoint(t, t, boolean) lt, fixpoint(t, boolean) set, t x) {
    return set(x) && !exists_t(forall_t, (is_lesser_element)(set, lt, x));
}

fixpoint boolean has_minimal<t>(fixpoint(fixpoint(t, boolean), boolean) forall_t, fixpoint(t, t, boolean) lt, fixpoint(t, boolean) set) {
    return forall_t((notf)(set)) || exists_t(forall_t, (is_minimal)(forall_t, lt, set));
}

predicate is_wf<t>(fixpoint(t, t, boolean) lt) =
    [_]is_forall_t<fixpoint(t, boolean)>(?forall_sets) &*&
    [_]is_forall_t<t>(?forall_t) &*&
    forall_sets((has_minimal)(forall_t, lt)) == true;

/**** Call permissions for recursion (with local level) ****/

predicate call_perm_rec<t>(list<Class> globalLevel, fixpoint(t, t, boolean) lt, t localLevel;);

lemma void call_below_perm__elim_rec<t>(real frac, list<Class> globalLevel, fixpoint(t, t, boolean) lt, t localLevel);
    requires call_below_perm_(?c) &*& level_lt(globalLevel, {c}) == true &*& [_]is_wf(lt);
    ensures [frac]call_perm_rec(globalLevel, lt, localLevel);

lemma void create_call_perm_rec<t>(real frac, list<Class> globalLevel, fixpoint(t, t, boolean) lt, t localLevel);
    requires call_perm(?level) &*& level_lt(globalLevel, level) == true &*& [_]is_wf(lt);
    ensures [frac]call_perm_rec(globalLevel, lt, localLevel);

lemma void call_perm_rec_weaken<t>(real frac, t newLocalLevel);
    requires call_perm_rec<t>(?globalLevel, ?lt, ?localLevel) &*& 0 < frac &*& lt(newLocalLevel, localLevel) == true;
    ensures [frac]call_perm_rec<t>(globalLevel, lt, newLocalLevel);

lemma void call_perm_rec_elim<t>(real frac);
    requires call_perm_rec<t>(?globalLevel, _, _) &*& 0 < frac;
    ensures [frac]call_perm(globalLevel);

/**** Well-founded order on integers ****/

fixpoint boolean int_lt(int x, int y) { return 0 <= x && x < y; }

lemma void is_wf_int_lt();
    requires true;
    ensures [_]is_wf(int_lt);

/**** Lexicographic order ****/

fixpoint boolean pair_lt<a, b>(fixpoint(a, a, boolean) a_lt, fixpoint(b, b, boolean) b_lt, pair<a, b> x, pair<a, b> y) {
    return a_lt(fst(x), fst(y)) || fst(x) == fst(y) && b_lt(snd(x), snd(y));
}

lemma void is_wf_pair_lt<a, b>(fixpoint(a, a, boolean) a_lt, fixpoint(b, b, boolean) b_lt);
    requires [_]is_wf(a_lt) &*& [_]is_wf(b_lt);
    ensures [_]is_wf((pair_lt)(a_lt, b_lt));

@*/
