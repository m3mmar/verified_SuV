#ifndef QUANTIFIERS_H
#define QUANTIFIERS_H

#include "nat.gh"

lemma t not_forall<t>(list<t> vs, fixpoint(t, bool) p);
    requires !forall(vs, p);
    ensures mem(result, vs) == true &*& !p(result);

lemma void forall_elim<t>(list<t> vs, fixpoint(t, bool) p, t x);
    requires forall(vs, p) == true &*& mem(x, vs) == true;
    ensures p(x) == true;

fixpoint bool forall_nth_core<t>(list<t> xs, fixpoint(list<t>, int, bool) p, nat n) {
    switch(n) {
        case zero: return p(xs, int_of_nat(zero));
        case succ(n0): return p(xs, int_of_nat(n)) && forall_nth_core(xs, p, n0);
    }
}

fixpoint bool forall_nth<t>(list<t> xs, fixpoint(list<t>, int, bool) p) {
    switch(xs) {
        case nil: return true;
        case cons(h, t): return forall_nth_core(xs, p, nat_of_int(length(xs) - 1));
    }
}

lemma int not_forall_nth<t>(list<t> vs, fixpoint (list<t>, int, bool) p);
    requires !forall_nth(vs, p);
    ensures 0 <= result &*& result < length(vs) &*& !p(vs, result);

lemma void forall_nth_elim<t>(list<t> vs, fixpoint (list<t>, int, bool) p, int i);
    requires forall_nth(vs, p) == true &*& 0 <= i &*& i < length(vs);
    ensures p(vs, i) == true;

/*

Quantifiers over all values of a type
=====================================

Note: a quantifier "fixpoint bool forall__<t>(fixpoint(t, bool) p);" would be great but
the elimination lemma for this quantifier would be unsound due to type erasure. The following
verifies:

fixpoint bool forall__<t>(fixpoint(t, bool) p);

lemma t not_forall__<t>(fixpoint(t, bool) p); // UNSOUND!!
    requires !forall__(p);
    ensures !p(result);

lemma void forall___intro<t>(fixpoint(t, bool) p, t x); // UNSOUND!!
    requires forall__(p) == true;
    ensures p(x) == true;

fixpoint bool eq<t>(t x, t y) { return x == y; }

fixpoint bool all_eq_<t>(t x) { return forall__((eq)(x)); }

lemma void absurd()
    requires true;
    ensures false;
{
    if (!forall__(all_eq_)) {
        unit u1 = not_forall__<unit>(all_eq_);
        unit u2 = not_forall__<unit>((eq)(u1));
        switch (u1) {
            case unit:
                switch (u2) {
                    case unit:
                }
        }
    }
    forall___intro<bool>(all_eq_, true);
    forall___intro<bool>((eq)(true), false);
}

*/

predicate is_forall_t<t>(; fixpoint(fixpoint(t, bool), bool) f);

/**
 * Returns a fixpoint f such that f(p) is true iff p(x) is true for all x.
 */
lemma fixpoint(fixpoint(t, bool), bool) get_forall_t<t>();
    requires true;
    ensures [_]is_forall_t<t>(result);

/**
 * Given p(x) is not true for all x, returns a witness w such that p(w) is not true.
 */
lemma t not_forall_t<t>(fixpoint(fixpoint(t, bool), bool) f, fixpoint(t, bool) p);
    requires [_]is_forall_t<t>(f) &*& !f(p);
    ensures !p(result);

/**
 * Given p(x) is true for all x, ensures it is also true for the given x.
 */
lemma void forall_t_elim<t>(fixpoint(fixpoint(t, bool), bool) f, fixpoint(t, bool) p, t x);
    requires [_]is_forall_t<t>(f) &*& f(p) == true;
    ensures p(x) == true;

fixpoint bool notf<t>(fixpoint(t, bool) p, t x) {
    return !p(x);
}

fixpoint bool exists_t<t>(fixpoint(fixpoint(t, bool), bool) forall_t, fixpoint(t, bool) p) {
    return !forall_t((notf)(p));
}

/**
 * An implementation of this typedef proves that p(x) is true for all x. Note that x is not constrained.
 *
 * In case the proof requires [_]is_forall_t<t3>(?p3) &*& p3(f3)==true for some t3,p3,f3,
 * you can pass this in the predicate pred.
 */
typedef lemma void forall_proof_t<t>(fixpoint(t, bool) p, predicate() pred)(t x);
    requires pred();
    ensures p(x) == true &*& pred();

/**
 * Ensures p(x) is true for all x,
 * given a lemma forall_proof that proves p(x) is true for an unconstrained x.
 *
 * Note: it might be easier to use not_forall_t instead because it does not require
 * creating a lemma function pointer chunk. See the implementation of apply_forall_proof
 * in quantifiers.c to see how not_forall_t can be used instead.
 */
lemma void apply_forall_proof<t>(forall_proof_t *forall_proof, fixpoint(t, bool) p, predicate() pred);
    requires is_forall_proof_t<t>(forall_proof, p, pred) &*& pred();
    ensures [_]is_forall_t<t>(?f) &*& true == f(p) &*& is_forall_proof_t<t>(forall_proof, p, pred) &*& pred();

// Instantiation for int (for convenience)

fixpoint bool forall_int(fixpoint(int, bool) p);

lemma void get_forall_int();
    requires true;
    ensures [_]is_forall_t<int>(forall_int);

lemma int not_forall_int(fixpoint(int, bool) p);
    requires !forall_int(p);
    ensures !p(result);

lemma void forall_int_elim(fixpoint(int, bool) p, int x);
    requires forall_int(p) == true;
    ensures p(x) == true;

#endif
