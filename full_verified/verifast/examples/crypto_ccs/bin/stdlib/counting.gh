#ifndef COUNTING_H
#define COUNTING_H

predicate counting<a, b>(predicate(a; b) p, a a, int count; b b);
predicate ticket<a, b>(predicate(a; b) p, a a, real frac;);

lemma void start_counting<a, b>(predicate(a; b) p, a a);
    requires p(a, ?b);
    ensures counting(p, a, 0, b);

lemma void counting_match_fraction<a, b>(predicate(a; b) p, a a);
    requires counting(p, a, ?count, ?b1) &*& [?f]p(a, ?b2);
    ensures counting(p, a, count, b1) &*& [f]p(a, b2) &*& b2 == b1;

lemma real create_ticket<a, b>(predicate(a; b) p, a a);
    requires counting(p, a, ?count, ?b);
    ensures counting(p, a, count + 1, b) &*& ticket(p, a, result) &*& [result]p(a, b) &*& 0 < result;

lemma void destroy_ticket<a, b>(predicate(a; b) p, a a);
    requires counting(p, a, ?count, ?b1) &*& ticket(p, a, ?f) &*& [f]p(a, ?b2) &*& 0 != count;
    ensures counting(p, a, count - 1, b1) &*& b2 == b1;

lemma void stop_counting<a, b>(predicate(a; b) p, a a);
    requires counting(p, a, 0, ?b);
    ensures p(a, b);

#endif