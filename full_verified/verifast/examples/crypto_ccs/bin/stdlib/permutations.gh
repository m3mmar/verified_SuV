#ifndef PERMUTATIONS_H
#define PERMUTATIONS_H

#include "nat.gh"
#include "quantifiers.gh"

fixpoint bool is_permutation<t>(list<t> xs, list<t> ys)
{
  switch(xs) {
    case nil: return ys == nil;
    case cons(h, t):
      return mem(h, ys) && is_permutation(t, remove(h, ys));
  }
}

lemma_auto void is_permutation_reflexive(list<int> xs);
  requires true;
  ensures is_permutation(xs, xs) == true;

lemma void is_perm_remove<t>(list<t> xs, list<t> ys, t x);
  requires is_permutation(xs, ys) == true;
  ensures is_permutation(remove(x, xs), remove(x, ys)) == true;

lemma void is_perm_mem<t>(list<t> xs, list<t> ys, t x);
  requires is_permutation(xs, ys) == true;
  ensures mem(x, xs) == mem(x, ys);

lemma void is_perm_transitive<t>(list<t> xs, list<t> ys, list<t> zs);
  requires is_permutation(xs, ys) == true &*& is_permutation(ys, zs)== true;
  ensures is_permutation(xs, zs) == true;

lemma void is_perm_cons_remove<t>(list<t> xs, t x);
  requires mem(x, xs) == true;
  ensures is_permutation(xs, cons(x, remove(x, xs))) == true;

lemma void is_perm_symmetric<t>(list<t> xs, list<t> ys);
  requires is_permutation(xs, ys) == true;
  ensures is_permutation(ys, xs) == true;
  
fixpoint int count_eq<t>(list<t> vs, t v) {
  switch(vs) {
    case nil: return 0;
    case cons(h, t): return (h == v ? 1 : 0) + count_eq(t, v);
  }
}

fixpoint bool same_count_eq<t>(list<t> xs, list<t> ys, t v) {
  return count_eq(xs, v) == count_eq(ys, v);
}

lemma_auto void count_eq_bounds<t>(list<t> vs, t v);
  requires true;
  ensures 0 <= count_eq(vs, v) && count_eq(vs, v) <= length(vs);
  
lemma void count_eq_nonzero_implies_mem<t>(list<t> vs, t v);
  requires 0 < count_eq(vs, v);
  ensures mem(v, vs) == true;

lemma void count_eq_remove<t>(list<t> vs, t v, t removed);
  requires true;
  ensures count_eq(remove(removed, vs), v) == count_eq(vs, v) - (!mem(removed, vs) || removed != v ? 0 : 1);

lemma void all_count_eq_iff_is_permutation<t>(list<t> xs, list<t> ys);
  requires [_]is_forall_t<t>(?forall_t);
  ensures is_permutation(xs, ys) == forall_t((same_count_eq)(xs, ys)) == true;

#endif
