# ----------------------------------------------------------------------
#
# There's no need to edit this file,
# 
# instead edit/create the file Makefile which is small and easy,
# see Makefile_template.make for information.
#
# ----------------------------------------------------------------------

# Too much magic in this file?  
# http://www.gnu.org/software/automake/manual/make/Quick-Reference.html
# might help.


#---------------------------- Tool locations ---------------------------#

# Use "?=" instead of ":=" such that environment variables are not
# overwritten such that the user can specify the filename and/or path if
# he/she wishes to do so.
VERIFAST ?= verifast
LNXMOD_PROXY_AUTOGEN ?= lnxmod_proxy_autogen
LNXMOD_PROXY_AUTOGEN_SOURCE := lnxmod_proxy_autogen.ml


#---------------------------- Check user config ------------------------#

# A loop would be nice here, but it would probably include
# more makefile-black-magic.

ifndef MODULE_FINAL_OBJ
  $(error Please edit your Makefile and fill in the field \
  MODULE_FINAL_OBJ)
endif
ifndef MODULE_INIT_OBJ
  $(error Please edit your Makefile and fill in the field \
  MODULE_INIT_OBJ)
endif
# Allowed to be empty, but please define it to be empty if that's what
# you want.
ifeq ($(origin MODULE_OBJS), undefined)
  $(error Please edit your Makefile and fill in the field MODULE_OBJS)
endif
ifndef CONFIG_MODULE_OR_BUILTIN
  $(error Please edit your Makefile and fill in the field \
  CONFIG_MODULE_OR_BUILTIN)
endif
ifndef MODULE_FINAL_OBJ
  $(error Please edit your Makefile and fill in the field \
  MODULE_FINAL_OBJ)
endif


#---------------------------- Check tools existence --------------------#

# We also check tool existence with "make clean", so we put a warning
# instead of an error.
# The optimal solution would be: pretty errors only in case of targets that
# do not require verification, but it turns out to be hard to implement
# this in a makefile.

fullpath := $(shell which $(VERIFAST))
ifndef fullpath
  $(warning Warning:)
  $(warning Cannot find the tool $(VERIFAST).  Maybe it is not installed or)
  $(warning not in your PATH.)
endif
fullpath := $(shell which $(LNXMOD_PROXY_AUTOGEN))
ifndef fullpath
  $(warning Warning:)
  $(warning Cannot find the tool $(LNXMOD_PROXY_AUTOGEN$))
  $(warning Maybe it is not compiled, $(LNXMOD_PROXY_AUTOGEN_SOURCE))
  $(warning contains instruction on how to do so.)
  $(warning Maybe you need to add it to your PATH)
endif


#---------------------------- Variables -------------------------------#

ifeq ($(origin KERNELRELEASE), undefined) # Invoked by hand.
  src := .
  obj := .
endif

MODULE_INIT := $(basename $(MODULE_INIT_OBJ))
MODULE_NONINIT := $(basename $(MODULE_OBJS))
MODULE_NAME := $(basename $(MODULE_FINAL_OBJ))

VF_NONINIT := vf_mem vf_mutex vf_printk vf_procfs
VF_INIT := vf_autogenerated_initexit_proxy_$(MODULE_INIT)

# Instead of all the variables, we could try to write a fancy
# function like this:
#   getfile = \
#    $(addsuffix $(strip $(3)), \
#      $(basename \
#        $(addprefix \
#          $($(strip $(4))), \
#          $($(strip $(1))_$(strip $(2))_OBJS)\
#        )\
#      )\
#    )
# call example: $(call getfile, MODULE, INIT, .c, src).
# But both the implementation and the usage are extremely error prone
# and debugging complex makefiles is not something you would like to
# experience.

autogen_target_c := \
	$(addprefix $(src)/, $(addsuffix .c, $(VF_INIT)))

autogen_target_vfmanifest := \
	$(addprefix $(src)/, $(addsuffix .vfmanifest, $(VF_INIT)))

autogen_target := \
	$(autogen_target_c) \
	$(autogen_target_vfmanifest)

autogen_input := \
	$(addprefix $(src)/, $(addsuffix .c, $(MODULE_INIT)))

verifast_target_nopath := \
	$(addsuffix .vfmanifest, $(MODULE_INIT) $(MODULE_NONINIT))

verifast_target := \
	$(addprefix $(obj)/, $(verifast_target_nopath))

# The order of the arguments for verifast is important.
verifast_input := \
	$(addprefix $(obj)/, $(addsuffix .o, $(VF_NONINIT))) \
	$(addprefix $(src)/, $(addsuffix .c, $(MODULE_NONINIT))) \
	$(addprefix $(src)/, $(addsuffix .c, $(MODULE_INIT))) \
	$(autogen_target_vfmanifest)

# (expected by kbuild)
obj-$(CONFIG_MODULE_OR_BUILTIN) := $(MODULE_NAME).o

# (expected by kbuild)
helloproc-objs := \
	$(addsuffix .o, $(MODULE_NONINIT)) \
	$(addsuffix .o, $(MODULE_INIT)) \
	$(addsuffix .o, $(VF_NONINIT)) \
	$(addsuffix .o, $(VF_INIT))

# kbuild, please also launch verifast. Thanks.
extra-y := $(verifast_target_nopath)


#------------------------- invoked by hand ----------------------------#
# Must be after the variables because we use them.
# Must be before the targets such that we can define the 
# default target (which is the first defined target).


ifeq ($(origin KERNELRELEASE), undefined)

  PWD := $(shell pwd)
 
  KERNELDIR ?= /lib/modules/$(shell uname -r)/build

  default: launch_kbuild

  clean:
	$(MAKE) -C $(KERNELDIR) M=$(PWD) clean
  
  
  # Sometimes you only want to run verification and do not want to compile.
  verify-only: verify_only
  verify_only: $(verifast_target)

  # It seems "extra-y" doesn't work when invoked by hand, so we
  # do verification ourself then (by adding the dependency)
  # Note the disadvantage that this implies that make can't run
  # verification and compilation concurrently, because of the
  # dependency we add here.
  
  launch_kbuild: $(verifast_target)
	$(MAKE) -C $(KERNELDIR) M=$(PWD) modules

help:
	@echo 'Targets:'
	@echo '  default           - Verify and compile'
	@echo '  clean             - Cleanup generated files'
	@echo '  verify_only       - Only verify, do not compile'

endif 

#--------------------------- targets ----------------------------------#

always_target:

$(autogen_target): $(autogen_input)
	@echo $(shell which $(LNXMOD_PROXY_AUTOGEN))
	$(LNXMOD_PROXY_AUTOGEN) $(autogen_input)


# Verify.
# Verifast only gets launched if make thinks its sources are modified.
# But .h files are also sources.  It's hard to parse a .c file in
# a makefile to find out what .h files it (secretly) includes, so we
# just always verify (by depending on always_target).
$(verifast_target): $(autogen_target) always_target
	$(VERIFAST) -shared -emit_vfmanifest $(verifast_input)

clean-files := \
	$(verifast_target) \
	$(autogen_target)
	


