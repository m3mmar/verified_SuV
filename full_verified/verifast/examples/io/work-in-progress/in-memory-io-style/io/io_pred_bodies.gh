/**
 *
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * If you are looking for examples of I/O, you are at the wrong file.
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 *
 * See ../syscall_memory.c to read what this is about.
 *
 *
 *
 * io_pred_bodies.gh - bodies of predicates of io.gh
 *
 * Plus the fixpoints used in these bodies.
 *
 * For just verifying programs that perform I/O,
 * you do not need to understand the contents of this file.
 *
 */

#ifndef IO_PRED_BODIES_GH
#define IO_PRED_BODIES_GH
#include "helpers/cooked_ghost_lists.gh"
#include <quantifiers.gh>
#include <listex.gh>
#include "helpers/listex_local.gh"
#include <io/io.gh>


fixpoint fixpoint(iostate, bool) invar_of_time(time t){
    switch (t){case time(invar, guarantee, rely): return invar;}
}
fixpoint fixpoint(iostate, iostate, bool) guarantee_of_time(time t){
    switch (t){case time(invar, guarantee, rely): return guarantee;}
}
fixpoint fixpoint(iostate, iostate, bool) rely_of_time(time t){
    switch (t){case time(invar, guarantee, rely): return rely;}
}


inductive triple<t1,t2,t3> = triple(t1,t2,t3);
fixpoint t1 triple1<t1,t2,t3>(triple<t1,t2,t3> triple){
    switch(triple){case triple(arg1, arg2, arg3): return arg1;}
}
fixpoint t2 triple2<t1,t2,t3>(triple<t1,t2,t3> triple){
    switch(triple){case triple(arg1, arg2, arg3): return arg2;}
}
fixpoint t3 triple3<t1,t2,t3>(triple<t1,t2,t3> triple){
    switch(triple){case triple(arg1, arg2, arg3): return arg3;}
}


fixpoint bool transitive<t>(fixpoint(t, t, bool) relation, triple<t,t,t> triple){
    return
        ! relation(triple1(triple), triple2(triple))
        || ! relation(triple2(triple), triple3(triple))
        || relation(triple1(triple), triple3(triple));
}


fixpoint bool reflexive<t>(fixpoint(t, t, bool) relation, t arg){
    return relation(arg, arg);
}


fixpoint bool invar_applies (iostate sigma, pair<int, time> ktime){
    return (invar_of_time(snd(ktime)))(sigma);
}


fixpoint bool invar_closed_under_rely(time time, pair<iostate, iostate > pair){
    // fst(pair) == sigma1
    // snd(pair) == sigma2
    return
        ! (invar_of_time(time)) (fst(pair)) // invar(sigma1) ->
        || ! (rely_of_time(time)) (fst(pair), snd(pair)) // rely(sigma1, sigma2) ->
        || (invar_of_time(time)) (snd(pair)); // invar(sigma2)
        
}


/** true iff invar1(sigma1) -> transition(sigma1, sigma2) -> invar2(sigma2) */
fixpoint bool arrows_invar_transition_invar(
    fixpoint(iostate, bool) invar1,
    fixpoint(iostate, iostate, bool) transition,
    fixpoint(iostate, bool) invar2,
    pair<iostate, iostate > sigmapair
){
    return
        ! invar1(fst(sigmapair))
        || ! transition(fst(sigmapair),snd(sigmapair))
        || invar2(snd(sigmapair));
}


fixpoint bool invar2_includes_guarantee(
    fixpoint(iostate, bool) invar1,
    fixpoint(iostate, bool) invar2,
    fixpoint(iostate, iostate, bool) guarantee,
    pair<iostate, iostate > sigmapair
){
    return arrows_invar_transition_invar(invar1, guarantee, invar2, sigmapair);
}


inductive quadruple<t1, t2, t3, t4> = quadruple(t1,t2,t3,t4);
fixpoint t1 quadruple1<t1,t2,t3,t4>(quadruple<t1,t2,t3,t4> quadruple){
    switch(quadruple){case quadruple(arg1, arg2, arg3, arg4): return arg1;}
}
fixpoint t2 quadruple2<t1,t2,t3,t4>(quadruple<t1,t2,t3,t4> quadruple){
    switch(quadruple){case quadruple(arg1, arg2, arg3, arg4): return arg2;}
}
fixpoint t3 quadruple3<t1,t2,t3,t4>(quadruple<t1,t2,t3,t4> quadruple){
    switch(quadruple){case quadruple(arg1, arg2, arg3, arg4): return arg3;}
}
fixpoint t4 quadruple4<t1,t2,t3,t4>(quadruple<t1,t2,t3,t4> quadruple){
    switch(quadruple){case quadruple(arg1, arg2, arg3, arg4): return arg4;}
}

/**
 * The operation allowed by guarantee of time1 is also allowed by rely of time2
 *
 * quadruple1(quadruple) = time1
 * quadruple2 = time2
 * quadruple3 = sigma1
 * quadruple4 = sigma2
 */
fixpoint bool guarantee_preserve_rely(list<pair<int,time> > times, quadruple<pair<int,time>,  pair<int, time>, iostate, iostate > quadruple){
    return
        ! mem(quadruple1(quadruple), times)
        || ! mem(quadruple2(quadruple), times)
        || ! (quadruple1(quadruple) != quadruple2(quadruple)) // if the times differ. That's why we keep the int in the pair.
        || ! (guarantee_of_time(snd(quadruple1(quadruple)))) (quadruple3(quadruple), quadruple4(quadruple)) // time1_guarantee(sigma1, sigma2) ->
        || (rely_of_time(snd(quadruple2(quadruple)))) (quadruple3(quadruple), quadruple4(quadruple)); // time2_rely(sigma1, sigma2)
}


/** for a given time, the operation allowed by rely is also allowed by invar. */
fixpoint bool rely_preserve_invar(list<pair<int,time> > times, pair< pair<int,time>, pair<iostate, iostate > > pair){
    // fst(pair) == ktime == pair(k,time)
    // snd(pair) == pair(sigma1,sigma2)
    
    return 
        ! mem(fst(pair), times) // the thread we quantify over is one that exists ->
        || invar_closed_under_rely(snd(fst(pair)), snd(pair));
        
}

fixpoint bool arrows_transition_transition(
    fixpoint(iostate, iostate, bool) transition1,
    fixpoint(iostate, iostate, bool) transition2,
    pair<iostate, iostate > sigmapair
){
    return
        !transition1(fst(sigmapair), snd(sigmapair))
        || transition2(fst(sigmapair), snd(sigmapair))
    ;
}


fixpoint bool invar_transition_eq_invar(
    fixpoint(iostate, bool) invar1,
    fixpoint(iostate, iostate, bool) transition,
    fixpoint(iostate, bool) invar2,
    pair<iostate, iostate > sigmapair
){
    return
        invar1(fst(sigmapair))
        && transition(fst(sigmapair),snd(sigmapair))
        == invar2(snd(sigmapair));
}



fixpoint bool transition_or(fixpoint(iostate, iostate, bool) guarantee1, fixpoint(iostate, iostate, bool) guarantee2, iostate state1, iostate state2){
    return guarantee1(state1, state2) || guarantee2(state1, state2);
}

fixpoint bool transition_and(fixpoint(iostate, iostate, bool) guarantee1, fixpoint(iostate, iostate, bool) guarantee2, iostate state1, iostate state2){
    return guarantee1(state1, state2) && guarantee2(state1, state2);
}

fixpoint bool invar_and(fixpoint(iostate, bool) invar1, fixpoint(iostate, bool) invar2, iostate sigma){
    return invar1(sigma) && invar2(sigma);
}
fixpoint bool iostate_add(iostate sigma1, iostate sigma2, ioaction act){
    switch(sigma1){
        case iostate(actions): return sigma2 == iostate(cons(act, actions));
    }
}

fixpoint bool syscall_guarantee(int c, fixpoint(iostate, bool) invar, fixpoint(iostate, iostate, bool) guarantee, pair<iostate, iostate > pair){
    // sigma1 == sigma2 -> guarantee(sigma1, sigma2)
    // invar(sigma1) && sigma2 == c + sigma2 -> guarantee(sigma1, sigma2)
    return
        ! (
          snd(pair) == fst(pair)
        
          || (
              invar( fst(pair) )
              && iostate_add(fst(pair),snd(pair), ioaction_write(c))
            )
        )
        || guarantee(fst(pair), snd(pair))
        
    ;
}


predicate split(time t1, time t2, time t3) =
    [_]is_forall_t<pair<iostate, iostate > >(?forall_sigmapair)
    &*& [_]is_forall_t<triple<iostate,iostate,iostate > >(?forall_triple)
    &*& [_]is_forall_t<iostate >(?forall_singleton)
    
    // I2 = R2(I1)
    &*& true==forall_sigmapair((invar_transition_eq_invar)(invar_of_time(t1), rely_of_time(t2), invar_of_time(t2)))
    &*& true==forall_sigmapair((invar_transition_eq_invar)(invar_of_time(t1), rely_of_time(t3), invar_of_time(t3)))
    &*& true == forall_singleton((reflexive)(rely_of_time(t2))) // TODO: do we need this? Follows from R2,R3 reflexive.
    &*& true == forall_singleton((reflexive)(rely_of_time(t3)))
    
    // G1 == G2 || G3
    &*& guarantee_of_time(t1) == (transition_or)(guarantee_of_time(t2), guarantee_of_time(t3))
    &*& forall_triple((transitive)(guarantee_of_time(t2))) == true
    &*& forall_triple((transitive)(guarantee_of_time(t3))) == true
    &*& true == forall_singleton((reflexive)(guarantee_of_time(t2))) // TODO: do we need this? "or" keeps reflexivity (but not transitivity).
    &*& true == forall_singleton((reflexive)(guarantee_of_time(t3)))
    
    // R2 subsetof G3||R1
    // Subset instead of "==" so that we can add the transitive requirement.
    &*& true==forall_sigmapair(
        (arrows_transition_transition)(
            (transition_or)(guarantee_of_time(t3), rely_of_time(t1)),
            rely_of_time(t2)
        )
    )
    &*& forall_triple((transitive)(rely_of_time(t2))) == true
    
    // R3 subsetof G2||R1
    &*& true==forall_sigmapair(
        (arrows_transition_transition)(
            (transition_or)(guarantee_of_time(t2), rely_of_time(t1)),
            rely_of_time(t3)
        )
    )
    &*& forall_triple((transitive)(rely_of_time(t3))) == true
;

predicate join(time t1, time t2, time t3) =
    invar_of_time(t3) == (invar_and)(invar_of_time(t1), invar_of_time(t2))
    && guarantee_of_time(t3) == (transition_and)(guarantee_of_time(t1), guarantee_of_time(t2))
    && rely_of_time(t3) == (transition_and)(rely_of_time(t1), rely_of_time(t2))
;

predicate time(int ghost_list_id, time t) = 
    [_]is_forall_t<triple<iostate,iostate,iostate > >(?forall_triple)
    &*& [_]is_forall_t<iostate >(?forall_singleton)
    
    &*& cooked_ghost_list_member_handle(ghost_list_id, ?k, t)
    
    &*& forall_triple((transitive)(guarantee_of_time(t))) == true
    &*& forall_triple((transitive)(rely_of_time(t))) == true
    
    &*& forall_singleton((reflexive)(guarantee_of_time(t))) == true
    &*& forall_singleton((reflexive)(rely_of_time(t))) == true
;


predicate iothreads_pure(list<pair<int, time> > k_time_pairs, iostate state) =
   true==distinct(k_time_pairs)
    
    // For all times, invar holds for the current state:
    &*& true == forall(k_time_pairs, (invar_applies)(state))
    
    // Guarantee of one time/thread implies rely of all other times/threads:
    &*& [_]is_forall_t< quadruple< pair<int,time>, pair<int, time>, iostate, iostate > >(?forall_guar_rely)
    &*& true == forall_guar_rely((guarantee_preserve_rely)(k_time_pairs))
    
    // Rely of one thread preserves invar of said thread. For a given time/thread, invar(sigma)->rely(sigma,sigma2)->invar(sigma2)
    &*& [_]is_forall_t< pair< pair<int,time>, pair<iostate, iostate > > >(?forall_ktimesigmasigma)
    &*& true == forall_ktimesigmasigma((rely_preserve_invar)(k_time_pairs))
;

predicate iothreads(int ghost_list_id, iostate state) =
  cooked_ghost_list<time>(ghost_list_id, _, ?k_time_pairs)
  &*& [_]iothreads_pure(k_time_pairs, state);

predicate syscall_io(time t1, int c, time t2) =
    t1 == time(?invar1, ?guarantee, ?rely)
    &*& t2 == time(?invar2, guarantee, rely)
    
    &*& [_]is_forall_t<pair<iostate, iostate > >(?forall_sigmapair)
    
    // guarantee is reflexive.
    // guarantee adds a c.
    &*& true == forall_sigmapair((syscall_guarantee)(c, invar1, guarantee))
    
    // invar2 = R({o^v|o \in invar1})
    &*& true == forall_sigmapair((invar2_includes_guarantee)(invar1,invar2,guarantee))
    &*& true == forall_sigmapair((invar_closed_under_rely)(t2))
;

#endif
