/**
 * cooked_ghost_lists.gh - easier to digest than raw_ghost_lists.gh.
 *
 * It guarantees that all pairs of (unique id, member) are
 * distinct, which makes some proofs easier.
 */

#ifndef COOKED_GHOST_LISTS_GH
#define COOKED_GHOST_LISTS_GH

#include <raw_ghost_lists.gh>
#include <quantifiers.gh>
#include <listex.gh>
#include "listex_local.gh"

fixpoint bool greater_than<t>(fixpoint(t,int) fp, int value1, t value2){
    return value1 > fp(value2);
}

predicate cooked_ghost_list<t>(int id; int n, list<pair<int, t> > elements) =
    raw_ghost_list(id, n, elements)
    &*& true==forall(elements, (greater_than)(fst, n))
    &*& true==distinct(elements);
predicate cooked_ghost_list_member_handle<t>(int id, int k; t element) =
    raw_ghost_list_member_handle(id, k, element);

lemma int create_cooked_ghost_list<t>()
    requires emp;
    ensures cooked_ghost_list<t>(result, 0, nil);
{
    return create_raw_ghost_list();
}

lemma void distinct_cons_end<t>(list<t> l, t x)
requires distinct(l) && !mem(x, l);
ensures true==distinct(append(l, {x}));
{
    switch(l){
        case nil:
        case cons(h,t):
            if (h != x){
                distinct_cons_end(t, x);
            }
    }
}

lemma int cooked_ghost_list_add<t>(int id, t x)
requires cooked_ghost_list<t>(id, ?n, ?xs);
ensures cooked_ghost_list<t>(id, n + 1, append(xs, {pair(n,x)}))
    &*& cooked_ghost_list_member_handle<t>(id, n, x)
    &*& result == n
    &*& true==distinct(append(xs, {pair(n,x)}));
{
    raw_ghost_list_add(id, x);
    list<pair<int, t> > elements_new = append(xs, {pair(n,x)});
    if (!forall(elements_new, (greater_than)(fst, n+1))){
        pair<int,t> elem = not_forall(elements_new, (greater_than)(fst, n+1));
        if (elem == pair(n,x)){
            assert false;
        }else{
            forall_elim(xs, (greater_than)(fst, n), elem);
            assert false;
        }
    }
    if (mem(pair(n,x),xs)){
        forall_elim(xs, (greater_than)(fst,n), pair(n,x));
        assert false;
    }
    distinct_cons_end(xs, pair(n,x));
    return n;
}

lemma t cooked_ghost_list_match<t>(int id, int k)
requires cooked_ghost_list<t>(id, ?n, ?xs)
    &*& [?f]cooked_ghost_list_member_handle<t>(id, k, ?x);
ensures cooked_ghost_list<t>(id, n, xs)
    &*& [f]cooked_ghost_list_member_handle<t>(id, k, x)
    &*& mem(pair(k, x), xs) == true
    &*& result == x;
{
    raw_ghost_list_match(id, k);
    return x;
}

lemma void cooked_ghost_list_remove<t>(int id, int k)
requires cooked_ghost_list<t>(id, ?n, ?xs)
    &*& cooked_ghost_list_member_handle<t>(id, k, ?x);
ensures cooked_ghost_list<t>(id, n, remove(pair(k, x), xs))
    &*& true==distinct(remove(pair(k,x),xs));
{
    raw_ghost_list_remove(id, k);
    forall_remove(xs, (greater_than)(fst, n), pair(k,x));
    distinct_remove(pair(k,x), xs);
    close cooked_ghost_list<t>(id, n, remove(pair(k, x), xs));
}


#endif