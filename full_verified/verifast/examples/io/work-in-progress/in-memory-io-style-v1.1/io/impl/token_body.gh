#ifndef TOKEN_BODY_GH
#define TOKEN_BODY_GH
/**
 * Definitions of token.
 */


#include "../token.gh"
#include "../helpers/set.gh"
#include "../../../in-memory-io-style/helpers/cooked_ghost_lists.gh"


predicate token(inst inst, place t) =
  cooked_ghost_list_member_handle(inst_id_list(inst), ?k, t);


predicate all_tokens_invar(inst inst, list<int> sigma) =

  cooked_ghost_list<place>(inst_id_list(inst), _, ?kplaces)
  
  // Because kplaces is distinct, after removing an element from kplaces, it
  // is not in kplaces anymore. Proving a property for the updated kplaces
  // thus does not need to prove it for the removed element anymore.
  // --> XXX I think we don't need this anymore.
  &*& true==distinct(kplaces)
  
  &*& [_]is_forall_t<pair<list<int>, list<int> > >(?forall_sigmapairs)
  &*& foreach(kplaces, kplace_all_properties(sigma))
  &*& allpairs_g_implies_r(kplaces)
;

fixpoint bool kplace_i_holds(list<int> sigma, pair<int, place> kplace){
  return (place_i(snd(kplace)))(sigma);
}

predicate kplace_r_is_reflexive(
  pair<int, place> kplace;
) =
  [_]set_is_reflexive(place_r(snd(kplace)));

// ∀t1,t2,σ1: t1 != t2 => t1.g(σ1) => t2.r(σ1)
predicate allpairs_g_implies_r(list<pair<int, place> > kplaces) =
  foreach (all_pairs(kplaces), g_implies_r);

  predicate g_implies_r(pair<pair<int, place>, pair<int, place> > kplacepair) =
    fst(kplacepair) == snd(kplacepair) ?
      true
    :
      [_]set_is_subset_of(
        place_g(snd(fst(kplacepair))),
        place_r(snd(snd(kplacepair)))
      )
  ;

  fixpoint list<pair<t,t> > all_pairs<t>(list<t> xs); // TODO body


fixpoint bool r_preserves_i_this_sigmapair(
  fixpoint(list<int>, bool) i,
  fixpoint(pair<list<int>, list<int> >, bool) r,
  // --- curry here
  pair<list<int>, list<int> > sigmapair
){
  return
    i(fst(sigmapair)) && true==r(sigmapair) ?
      i(snd(sigmapair))
    :
      true
  ;
}
  
fixpoint bool kplace_r_preserves_i(
  fixpoint(fixpoint(pair<list<int>, list<int> >, bool), bool) forall,
  pair<int, place> kplace
) {
  return true==forall(
    (r_preserves_i_this_sigmapair)(place_i(snd(kplace)), place_r(snd(kplace)))
  );
}

// ∀t: t.r is transitive
predicate kplace_r_is_transitive(pair<int, place> kplace;) =
  [_]set_is_transitive(place_r(snd(kplace)));

predicate_ctor kplace_all_properties(list<int> sigma)(pair<int, place> kplace) =
  true==kplace_i_holds(sigma, kplace)
  &*& [_]kplace_r_is_reflexive(kplace)
  &*& [_]set_relation_preserves_set<list<int> >(place_r(snd(kplace)), place_i(snd(kplace)))
  &*& [_]kplace_r_is_transitive(kplace)
;

