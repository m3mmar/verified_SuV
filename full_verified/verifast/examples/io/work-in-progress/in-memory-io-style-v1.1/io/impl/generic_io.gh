#ifndef GENERIC_IO_GH
#define GENERIC_IO_GH


#include "../place.gh"
#include "../helpers/set.gh"
#include "../helpers/prophecy.gh"
#include <quantifiers.gh>

predicate generic_input_io(
  place t1,
  fixpoint(list<int> sigma1, pair<list<int>, int> sigma2_and_in) the_action,
  int input,
  place t2
) =
  t1 == place(?i1, ?g1, ?r1)
  &*& t2 == place(?i2, ?g2, ?r2)
  
  &*& r1 == r2
  &*& g1 == g2
  // g2 includes .\sigma1,sigma2.i1(sigma1) && fst(the_action(sigma1,sigma2)
  &*& [_]set_is_subset_of(
    (set_intersect)(
      (after)(i1, fst),
      (set_func_to_rel)((after)(fst, the_action))
    ),
    g2
  )
  // TODO: i2 is subset of ....
  
  
  
  &*& [_]is_forall_t<list<int> >(?forall_sigma)
  &*& prophecy((generic_input_prophecy_fp)(t1, forall_sigma, the_action), input)
;

fixpoint bool generic_input_prophecy_exists(
  place t1,
  int input,
  fixpoint(list<int> sigma1, pair<list<int>, int> sigma2_and_in) the_action,
  // --- curry here
  list<int> sigma
){
  return (place_i(t1))(sigma) && snd(the_action(sigma)) == input;
}

fixpoint bool generic_input_prophecy_fp(
  place t1,
  fixpoint(fixpoint(list<int>, bool), bool) forall_sigma,
  fixpoint(list<int> sigma1, pair<list<int>, int> sigma2_and_in) the_action,
  // --- curry here
  int input
){
  return exists_t(forall_sigma, (generic_input_prophecy_exists)(t1, input, the_action));
}

fixpoint bool generic_input_invar_exists(
  place t1,
  fixpoint(list<int> sigma1, pair<list<int>, int> sigma2_and_in) the_action,
  list<int> sigma,
  // --- curry here
  list<int> sigma_exists
){
  return
    (place_i(t1))(sigma_exists)
    && (place_r(t1))(pair(fst(the_action(sigma_exists)), sigma))
  ;
}

fixpoint bool generic_input_invar(
  place t1,
  fixpoint(fixpoint(list<int>, bool), bool) forall_sigma,
  fixpoint(list<int> sigma1, pair<list<int>, int> sigma2_and_in) the_action,
  // --- curry here
  list<int> sigma
){
  return exists_t(forall_sigma, (generic_input_invar_exists)(t1, the_action, sigma));
}



predicate generic_output_io(
  place t1,
  fixpoint(list<int> sigma1, list<int> sigma2) the_action,
  place t2
) =
  t1 == place(?i1, ?g, ?r)
  &*& t2 == place(?i2, g, r)
  &*& [_]set_is_subset_of((generic_output_g_add)(t1, the_action), g)
  &*& [_]is_forall_t<list<int> >(?forall_t)
  &*& [_]set_is_subset_of((generic_output_invar)(t1, the_action, forall_t), i2)
;

fixpoint bool generic_output_invar_helper(
  place t1,
  fixpoint(list<int> sigma1, list<int> sigma2) the_action,
  fixpoint(fixpoint(list<int>, bool), bool) forall_t,
  list<int> sigma,
  // --- curry here
  list<int> sigma_i1
){
  return (place_i(t1))(sigma_i1) && (place_r(t1))(pair(the_action(sigma_i1), sigma));
}

fixpoint bool generic_output_invar(
  place t1,
  fixpoint(list<int> sigma1, list<int> sigma2) the_action,
  fixpoint(fixpoint(list<int>, bool), bool) forall_t,
  // --- curry here
  list<int> sigma
){
  return true==exists_t(forall_t, (generic_output_invar_helper)(t1, the_action, forall_t, sigma));
}

fixpoint bool generic_output_g_add(
  place t1,
  fixpoint(list<int> sigma1, list<int> sigma2) the_action,
  // --- curry here
  pair<list<int>, list<int> > sigmapair
){
  return (place_i(t1))(fst(sigmapair))
    && snd(sigmapair) ==the_action(fst(sigmapair));
}

#endif