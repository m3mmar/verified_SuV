#ifndef SET_GH
#define SET_GH

#include <quantifiers.gh>


// ------------------------------ Useful sets ------------------------------ //

fixpoint bool set_identity_relation<t>(pair<t, t> value){
  switch(value){
    case pair(a,b): return a == b;
  }
}


fixpoint bool set_empty<t>(t value){
  return false;
}


// ------------------------------ Building sets ---------------------------- //

fixpoint bool set_union<t>(
  fixpoint(t, bool) set1, fixpoint(t, bool) set2,
  // --- curry away here
  t val
){
  return set1(val) || set2(val);
}


fixpoint bool set_intersect<t>(
  fixpoint(t, bool) set1, fixpoint(t, bool) set2,
  // --- curry away here
  t val
){
  return set1(val) && set2(val);
}

fixpoint bool set_func_to_rel<ta, tb>(fixpoint(ta, tb) func, pair<ta, tb> val){
  return func(fst(val)) == snd(val);
}

// function composition
fixpoint tc after<ta, tb, tc>(
  fixpoint(tb, tc) f1,
  fixpoint(ta, tb) f2,
  // --- curry here
  ta val
){
  return f1(f2(val));
}


// --------------------------- Properties of sets -------------------------- //

// Subset (a set is subset of itself)
// must a predicate (instead of a fixpoint) because of quantifiers.gh.
predicate set_is_subset_of<t>(
  fixpoint(t, bool) smallset, fixpoint(t, bool) bigset;
) =
  [_]is_forall_t<t>(?forall_t)
  &*& true==forall_t((set_is_subset_of_forall)(smallset, bigset))
;

fixpoint bool set_is_subset_of_forall<t>(
  fixpoint(t, bool) smallset, fixpoint(t, bool) bigset, t elem
){
  return smallset(elem) ? bigset(elem) : true;
}

predicate set_is_superset_of<t>(
  fixpoint(t, bool) bigset, fixpoint(t, bool) smallset;
) =
  [_]set_is_subset_of(smallset, bigset);

lemma void set_subset_property<t>(
  fixpoint(t, bool) smallset, fixpoint(t, bool) bigset, t elem
);
requires [_]set_is_subset_of(smallset, bigset) &*& true==smallset(elem);
ensures true==bigset(elem);

lemma void set_subset_transitivity<t>(
  fixpoint(t, bool) smallset,
  fixpoint(t, bool) bigset,
  fixpoint(t, bool) hugeset
);
requires [_]set_is_subset_of(smallset, bigset)
  &*& [_]set_is_subset_of(bigset, hugeset);
ensures [_]set_is_subset_of(smallset, hugeset);

lemma void set_subset_union<t>(fixpoint(t, bool) set1, fixpoint(t, bool) set2);
requires true;
ensures [_]set_is_subset_of(set1, (set_union)(set1, set2));

// Reflexivity.
predicate set_is_reflexive<t>(fixpoint(pair<t, t>, bool) set;) =
  [_]set_is_subset_of(set_identity_relation, set);


// Transitivity.
// must a predicate (instead of a fixpoint) because of quantifiers.gh.
predicate set_is_transitive<t>(fixpoint(pair<t, t>, bool) set;);


lemma void set_transitivy_property<t>(
  fixpoint(pair<t, t>, bool) set, t a, t b, t c
);
requires
  [_]set_is_transitive(set)
  &*& true==set(pair(a,b))
  &*& true==set(pair(b,c));
ensures true==set(pair(a,c));


// Relation preserves set
predicate set_relation_preserves_set<t>(
  fixpoint(pair<t, t>, bool) relation,
  fixpoint(t, bool) set
);

lemma void set_relation_preserves_set_property<t>(
  fixpoint(pair<t, t>, bool) relation,
  fixpoint(t, bool) set,
  t element1,
  t element2
);
requires [_]set_relation_preserves_set(relation, set)
  &*& true==set(element1)
  &*& true==relation(pair(element1, element2));
ensures true==set(element2);


#endif
