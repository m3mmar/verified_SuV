#ifndef GHOST_MUTEX_GH
#define GHOST_MUTEX_GH

/** 
 * Ghost mutexes.
 */

predicate ghost_mutex(int id; predicate() invar);

lemma int create_ghost_mutex(predicate() invar);
requires invar();
ensures ghost_mutex(result, invar);

typedef lemma void critical_section_t
  (predicate() invar, predicate() pre, predicate() post)
  ();
requires invar() &*& pre();
ensures invar() &*& post();

lemma void ghost_mutex_use(int id, predicate() pre, predicate() post,
  critical_section_t *critical_section
);
nonghost_callers_only
// The critical_section cannot open the mutex, because it cannot be
// nonghost_callers_only, because a lemma_function_pointer_chunk must be
// creatable from it, because of the precondition below.
requires
  [?f]ghost_mutex(id, ?invar)
  &*& pre()
  &*& is_critical_section_t(critical_section, invar, pre, post);
ensures
  [f]ghost_mutex(id, invar)
  &*& post()
  &*& is_critical_section_t(critical_section, invar, pre, post);

#endif
