#ifndef PLACE_GH
#define PLACE_GH


// TODO: place should become generic, but the trivial way of trying that
//       would cause the negative-poisition-argument error.
inductive place = place(
  fixpoint(list<int>, bool), // invariant
  fixpoint(pair<list<int>, list<int> >, bool), // guarantee
  fixpoint(pair<list<int>, list<int> >, bool) // rely
);

fixpoint fixpoint(list<int>, bool) place_i(place t){
  switch(t){ case place(i, g, r): return i; }
}
fixpoint fixpoint(pair<list<int>, list<int> >, bool) place_g(place t){
  switch(t){ case place(i, g, r): return g; }
}
fixpoint fixpoint(pair<list<int>, list<int> >, bool) place_r(place t){
  switch(t){ case place(i, g, r): return r; }
}
#endif