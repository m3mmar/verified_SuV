// TODO maybe we shuold make this one a bit more generic.

#ifndef __PROPHECY_GH
#define __PROPHECY_GH


// TODO: get rid of family and use predicate_constructor?
predicate prophecy<t,u>(t val, int family, predicate(int family, u state) the_invariant, fixpoint(t value, u state1, u state2, bool possible_transition) io_fp);

lemma void prophecy_assign<t, u>(t prophetic_value, t val);
nonghost_callers_only // TODO: do we still need this? If yes, document why.
requires
  prophecy<t, u>(prophetic_value, ?family, ?pred, ?fp)
  &*& pred(family, ?state)
  &*& exists<u>(?new_state) &*& true == fp(val, state, new_state);
ensures
  [_]prophecy<t, u>(prophetic_value,  family, pred, fp)
  &*& pred(family, state)
  &*& val == prophetic_value
;

// do not use the prophecy (i.e. prophetic_value is not assigned),
// but ensures that the invariants on the prophetic value hold.
lemma void prophecy_holds<t, u>(t prophetic_value, t witness_val, u witness_new_state);
requires
  prophecy<t, u>(prophetic_value, ?family, ?pred, ?fp)
  &*& pred(family, ?state)
  &*& true == fp(witness_val, state, witness_new_state);
ensures
  prophecy<t, u>(prophetic_value,  family, pred, fp)
  &*& pred(family, state)
  &*& true==fp(prophetic_value, state, witness_new_state)
;

lemma t prophecy_create<t, u>(int family, predicate (int family, u state) the_invariant, fixpoint(t, u, u, bool) io_fp);
requires true;
ensures prophecy<t, u>(result, family, the_invariant, io_fp);

#endif


