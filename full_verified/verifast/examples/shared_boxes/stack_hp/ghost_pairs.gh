#ifndef GPAIRS_H
#define GPAIRS_H

/*
    A ghost object that represents a pair of values.
    The implementation illustrates how gcell's can be used to model fields of a struct.
     
*/

/*@
predicate ghost_pair(int id;);
predicate ghost_pair_fst<t>(int id; t v);
predicate ghost_pair_snd<t>(int id; t v);

lemma int create_ghost_pair<t1,t2>(t1 v1, t2 v2);
    requires true;
    ensures ghost_pair(result) &*& ghost_pair_fst<t1>(result, v1)  &*& ghost_pair_snd<t2>(result, v2);

lemma void ghost_pair_set_fst<t>(int id, t v);
    requires ghost_pair_fst<t>(id, _);
    ensures ghost_pair_fst<t>(id, v);

lemma void ghost_pair_set_snd<t>(int id, t v);
    requires ghost_pair_snd<t>(id, _);
    ensures ghost_pair_snd<t>(id, v);

lemma void ghost_pair_fraction_info<t>(int id);
    requires [?f]ghost_pair(id);
    ensures [f]ghost_pair(id) &*& 0 < f &*& f <= 1;

lemma void ghost_pair_fst_fraction_info<t>(int id);
    requires [?f]ghost_pair_fst<t>(id, ?value);
    ensures [f]ghost_pair_fst<t>(id, value) &*& 0 < f &*& f <= 1;

lemma void ghost_pair_snd_fraction_info<t>(int id);
    requires [?f]ghost_pair_snd<t>(id, ?value);
    ensures [f]ghost_pair_snd<t>(id, value) &*& 0 < f &*& f <= 1;

lemma void dispose_ghost_pair<t1,t2>(int id);
    requires ghost_pair(id) &*& ghost_pair_fst<t1>(id, _)  &*& ghost_pair_snd<t2>(id, _);
    ensures true;


#endif