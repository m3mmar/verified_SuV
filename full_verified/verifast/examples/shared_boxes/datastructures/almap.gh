#ifndef ALMAP_H
#define ALMAP_H

/*
    Abstract well-founded list maps
    - represents the map as a list of entries
    - allow a custom data type te for the entries
    - functions starting with wf maintain the datastructure invariant is_wfalmap, but hey may also require it.
    
*/
#include "listex2.gh"
#include "lset.gh"
#include "exwitness.gh"


// basic inspectors: almap_contains_key, almap_get_entry
fixpoint bool almap_contains_key<te,tk>(list<te> es, fixpoint(te, tk) fk, tk k)
{
    switch(es) {
        case nil: return false;
        case cons(e, es2): return fk(e) == k ? true : almap_contains_key(es2, fk, k);
    }
}

fixpoint te almap_get_entry<te,tk>(list<te> es, fixpoint(te, tk) fk, tk k)
{
    switch(es) {
        case nil: return default_value<te>();
        case cons(e, es2): return fk(e) == k ? e : almap_get_entry(es2, fk, k);
    }
}

//derived inspectors

fixpoint bool almap_contains_entry<te,tk>(list<te> es, fixpoint(te, tk) fk, te el) {
    return almap_contains_key(es, fk, fk(el)) && almap_get_entry(es, fk, fk(el)) == el;
}

fixpoint tv almap_get_value<te,tk,tv>(list<te> es, fixpoint(te, tk) fk, fixpoint(te, tv) fv, tk k)
{
    return fv(almap_get_entry(es, fk, k));
}

fixpoint list<tk> almap_keys<te,tk>(list<te> es, fixpoint(te, tk) fk) 
{
    return map(fk, es);
}

fixpoint list<te> almap_entries_helper<te,tk>(list<te> es, fixpoint(te, tk) fk, list<te> res) 
{
    switch(es) {
        case nil: return res;
        case cons(e, es2):
            return (almap_contains_key(res, fk, fk(e)) ? almap_entries_helper(es2, fk, res) : almap_entries_helper(es2, fk, snoc(res, e))   );  
    }
}

fixpoint list<te> almap_entries<te,tk>(list<te> es, fixpoint(te, tk) fk) 
{
    return almap_entries_helper(es, fk, nil);
}

fixpoint list<tv> almap_values<te,tk,tv>(list<te> es, fixpoint(te, tk) fk, fixpoint(te, tv) fv) 
{
    return map(fv, almap_entries(es, fk));
}

fixpoint bool almap_contains_value<te,tk,tv>(list<te> es, fixpoint(te, tk) fk, fixpoint(te, tv) fv, tv v) {
    return lset_contains(almap_values(es, fk, fv), v);
}

fixpoint bool almap_disjoint<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk)
{
    return lset_disjoint(almap_keys(es1, fk), almap_keys(es2, fk));
}

fixpoint bool almap_submap<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk)
{
    return lset_subset(almap_entries(es1, fk), almap_entries(es2, fk));
}

fixpoint bool almap_equals<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk)
{
    return lset_equals(almap_entries(es1, fk), almap_entries(es2, fk));
}


//ctors
fixpoint list<te> almap_empty<te>()
{
    return nil;
}

fixpoint list<te> almap_remove_key<te,tk>(list<te> es, fixpoint(te, tk) fk, tk k)
{
    switch(es) {
        case nil: return nil;
        case cons(e, es2): return fk(e) == k ? almap_remove_key(es2, fk, k) : cons(e, almap_remove_key(es2, fk, k)); 
    }
}

fixpoint list<te> almap_put<te,tk>(list<te> es, fixpoint(te, tk) fk, te el)
{
    return cons(el, es);
}

fixpoint list<te> almap_override<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk)
{
    return append(es1, es2);
}

fixpoint list<te> almap_restrict<te,tk>(list<te> es, list<tk> ks, fixpoint(te, tk) fk)
{
    switch(es) {
        case nil: return nil;
        case cons(e, es2): return lset_contains(ks, fk(e)) ? cons(e, almap_restrict(es2, ks, fk)) : almap_restrict(es2, ks, fk);
    }
}

// lemma's about basic inspectors

lemma void almap_get_entry_key<te,tk>(list<te> es, fixpoint(te, tk) fk, tk k);
    requires almap_contains_key(es, fk, k) == true;
    ensures fk(almap_get_entry(es, fk, k)) == k;


//lemma's for derived inspectors
lemma void almap_contains_entry_spec<te,tk>(list<te> es, fixpoint(te, tk) fk, te e);
    requires true;
    ensures almap_contains_entry(es, fk, e) == (almap_contains_key(es, fk, fk(e)) && almap_get_entry(es, fk, fk(e)) == e);
    
lemma void almap_get_value_spec<te,tk,tv>(list<te> es, fixpoint(te, tk) fk, fixpoint(te, tv) fv, tk k);
    requires true;
    ensures almap_get_value(es, fk, fv, k) == fv(almap_get_entry(es, fk, k));

lemma void almap_contains_value_true<te,tk,tv>(list<te> es, fixpoint(te, tk) fk, fixpoint(te, tv) fv, tv v);
    requires almap_contains_value(es, fk, fv, v) == true;
    ensures exwitness(?e) &*& almap_contains_entry(es, fk, e) == true &*& fv(e) == v;

lemma void almap_contains_value_false<te,tk,tv>(list<te> es, fixpoint(te, tk) fk, fixpoint(te, tv) fv, tv v, te e);
    requires almap_contains_value(es, fk, fv, v) == false &*& almap_contains_entry(es, fk, e) == true;
    ensures fv(e) != v;

lemma void almap_keys_contains_key<te,tk>(list<te> es, fixpoint(te, tk) fk, tk k);
    requires true;
    ensures lset_contains(almap_keys(es, fk), k) == almap_contains_key(es, fk, k);

lemma void almap_entries_contains_entry<te,tk>(list<te> es, fixpoint(te, tk) fk, te e);
    requires true;
    ensures lset_contains(almap_entries(es, fk), e) == almap_contains_entry(es, fk, e);

lemma void almap_values_contains_value<te,tk,tv>(list<te> es, fixpoint(te, tk) fk, fixpoint(te, tv) fv, tv v);
    requires true;
    ensures lset_contains(almap_values(es, fk, fv), v) == almap_contains_value(es, fk, fv, v);

lemma void almap_disjoint_true<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk, tk k);
    requires almap_disjoint(es1, es2, fk) == true;
    ensures !almap_contains_key(es1, fk, k) || !almap_contains_key(es2, fk, k);
    
lemma void almap_disjoint_false<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk);
    requires almap_disjoint(es1, es2, fk) == false;
    ensures exwitness(?k) &*& almap_contains_key(es1, fk, k) == true &*& almap_contains_key(es2, fk, k) == true;

// specification of construtors

lemma void almap_empty_contains_key<te,tk>(list<te> es, fixpoint(te, tk) fk, tk k);
    requires true; 
    ensures !almap_contains_key(almap_empty(), fk, k);  

lemma void almap_remove_key_contains_key<te,tk>(list<te> es, fixpoint(te, tk) fk, tk k, tk k2);
    requires true; 
    ensures almap_contains_key(almap_remove_key(es, fk, k), fk, k2) == (k != k2 && almap_contains_key(es, fk, k2)); 

lemma void almap_put_contains_key<te,tk>(list<te> es, fixpoint(te, tk) fk, te e, tk k);
    requires true; 
    ensures almap_contains_key(almap_put(es, fk, e), fk, k) == (fk(e) == k || almap_contains_key(es, fk, k)); 

lemma void almap_empty_contains_entry<te,tk>(list<te> es, fixpoint(te, tk) fk, te e);
    requires true; 
    ensures !almap_contains_entry(almap_empty(), fk, e);  

lemma void almap_remove_key_contains_entry<te,tk>(list<te> es, fixpoint(te, tk) fk, tk k, te e);
    requires true; 
    ensures almap_contains_entry(almap_remove_key(es, fk, k), fk, e) == (k != fk(e) && almap_contains_entry(es, fk, e)); 

lemma void almap_put_contains_entry<te,tk>(list<te> es, fixpoint(te, tk) fk, te e1, te e2);
    requires true; 
    ensures almap_contains_entry(almap_put(es, fk, e1), fk, e2) == (fk(e1) == fk(e2) ? e1 == e2 : almap_contains_entry(es, fk, e2)); 

lemma void almap_override_contains_entry<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk, te e);
    requires true; 
    ensures almap_contains_entry(almap_override(es1, es2, fk), fk, e) == (almap_contains_key(es1, fk, fk(e)) ? almap_contains_entry(es1, fk, e) : almap_contains_entry(es2, fk, e));

lemma void almap_restrict_contains_entry<te,tk>(list<te> es, list<tk> ks, fixpoint(te, tk) fk, te e);
    requires true; 
    ensures almap_contains_entry(almap_restrict(es, ks, fk), fk, e) == (lset_contains(ks, fk(e)) && almap_contains_entry(es, fk, e));

lemma void almap_override_contains_key<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk, tk k);
    requires true; 
    ensures almap_contains_key(almap_override(es1, es2, fk), fk, k) == (almap_contains_key(es1, fk, k) || almap_contains_key(es2, fk, k));

lemma void almap_restrict_contains_key<te,tk>(list<te> es, list<tk> ks, fixpoint(te, tk) fk, tk k);
    requires true; 
    ensures almap_contains_key(almap_restrict(es, ks, fk), fk, k) == (lset_contains(ks, k) && almap_contains_key(es, fk, k));




// specification of almap_submap and almap_equals

lemma void almap_submap_contains_entry<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk, te el);
    requires almap_submap(es1, es2, fk) == true;
    ensures almap_contains_entry(es1, fk, el) ? almap_contains_entry(es2, fk, el) == true : true;

lemma void almap_equals_contains_entry<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk, te el);
    requires almap_equals(es1, es2, fk) == true;
    ensures almap_contains_entry(es1, fk, el) == almap_contains_entry(es2, fk, el);

lemma void almap_submap_contains_key<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk, tk k);
    requires almap_submap(es1, es2, fk) == true;
    ensures almap_contains_key(es1, fk, k) ? almap_contains_key(es2, fk, k) == true : true;

lemma void almap_equals_contains_key<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk, tk k);
    requires almap_equals(es1, es2, fk) == true;
    ensures almap_contains_key(es1, fk, k) == almap_contains_key(es2, fk, k);

lemma void almap_submap_contains_entry_conv<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk);
    requires almap_submap(es1, es2, fk) == false;
    ensures exwitness(?el) &*& almap_contains_entry(es1, fk, el) == true &*& !almap_contains_entry(es2, fk, el);

lemma void almap_equals_contains_entry_conv<te,tk>(list<te> es1, list<te> es2, fixpoint(te, tk) fk);
    requires almap_equals(es1, es2, fk) == false;
    ensures exwitness(?el) &*& almap_contains_entry(es1, fk, el) != almap_contains_entry(es2, fk, el);


    
//misc
lemma void almap_entries_distinct<te,tk>(list<te> es, fixpoint(te, tk) fk);
    requires true;
    ensures distinct(almap_keys(almap_entries(es, fk), fk)) == true;



#endif