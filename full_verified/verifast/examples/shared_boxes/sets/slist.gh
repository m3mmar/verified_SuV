#ifndef SLIST_H
#define SLIST_H

#include "listex2.gh"

// sorted lists without duplicates
// TODO: remove other lemma's

fixpoint bool sorted(list<int> vs) {
    switch(vs) {
        case nil: return true;
        case cons(h1, t1): return 
            switch(t1) {
                case nil: return true;
                case cons(h2, t2): return h1 < h2 && sorted(t1);
            };
    }
}

fixpoint list<int> sorted_insert(int v, list<int> vs) {
    switch(vs) {
        case nil: return cons(v, nil);
        case cons(h, t): 
            return (h < v ? cons(h, sorted_insert(v, t)) : (h == v ? vs : cons(v, vs)));
    }
}

fixpoint t last<t>(list<t> l) 
{
    switch(l) {
        case nil:return default_value<t>;
        case cons(h, t): return (t == nil ? h : last(t)); 
    }
}

//assuming el is member of l
fixpoint list<t> insertAfter<t>(list<t> l, t el, t el2)
{
    switch(l) {
       case nil: return nil;
       case cons(h, t):
           return (h == el? cons(h, cons(el2, t)) : cons(h, insertAfter(t, el, el2)));
    }
}

fixpoint list<t> replace<t>(list<t> l, t el, list<t> l2)
{
    switch(l) {
       case nil: return nil;
       case cons(h, t):
           return (h == el? append(l2,t) : cons(h, replace(t, el, l2)));
    }
}

lemma void sorted_mem_cons(int v, int x, list<int> l);
    requires sorted(cons(x, l)) == true &*& v < x;
    ensures !mem(v, cons(x, l)); 

lemma void sorted_mem_cons2(int v, int x, int y, list<int> l);
    requires sorted(cons(x, cons(y, l))) == true &*& x < v &*& v <= y;
    ensures mem(v, cons(x, cons(y, l))) == (v == y); 

lemma void sorted_cons(int x, list<int> l);
    requires sorted(cons(x, l)) == true;
    ensures sorted(l) == true;

lemma void sorted_append(int x, list<int> l1, int y, list<int> l2);
    requires sorted(append(cons(x, l1), cons(y, l2))) == true;
    ensures x < y; 

lemma void sorted_mem_append(int v, list<int> l1, int x, list<int> l2);
    requires sorted(append(l1, cons(x, l2))) == true &*& x < v;
    ensures mem(v, append(l1, cons(x, l2))) == mem(v, l2); 

lemma void sorted_append_split(list<int> l1, list<int> l2);
    requires sorted(append(l1, l2)) == true;
    ensures sorted(l2) == true;

lemma void sorted_append_split2(list<int> l1, list<int> l2);
    requires sorted(append(l1, l2)) == true;
    ensures sorted(l1) == true;

lemma void sorted_snoc(list<int> l, int v);
    requires sorted(snoc(l, v)) == true;
    ensures sorted(l) == true;

lemma void sorted_insert_mem(int v, list<int> vs);
    requires true;
    ensures mem(v, sorted_insert(v, vs)) == true;

lemma void append_snoc<t>(list<t> l1, t val, list<t> l2);
    requires true;
    ensures append(snoc(l1, val), l2) == append(l1, cons(val, l2));

lemma void sorted_insert_sorted(int v, list<int> vs);
    requires sorted(vs) == true;
    ensures sorted(sorted_insert(v, vs)) == true;

lemma void si_append(int v, list<int> l1, int l2h, list<int>l2t);
    requires sorted(append(l1, cons(l2h, l2t))) == true &*& v < l2h;
    ensures sorted_insert(v, append(l1, cons(l2h, l2t))) == append(sorted_insert(v, l1), cons(l2h, l2t));

lemma void si1(int v, list<int> l);
    requires sorted(cons(INT_MIN, snoc(l, INT_MAX))) == true &*& v > INT_MIN &*& v < INT_MAX;
    ensures sorted_insert(v, cons(INT_MIN, snoc(l, INT_MAX))) == cons(INT_MIN, snoc(sorted_insert(v, l), INT_MAX));

lemma void si2(int v, list<int> l1, int pv, int cv, list<int> l2);
    requires sorted(append(l1, cons(pv, cons(cv, l2)))) == true &*& pv < v &*& v < cv;
    ensures sorted_insert(v, append(l1, cons(pv, cons(cv, l2)))) == append(l1, cons(pv, cons(v, cons(cv, l2))));

lemma void si3(int v, list<int> l1, int pv, int cv, list<int> l2);
    requires sorted(append(l1, cons(pv, cons(cv, l2)))) == true &*& v == cv;
    ensures sorted_insert(v, append(l1, cons(pv, cons(cv, l2)))) == append(l1, cons(pv, cons(cv, l2)));

lemma void append_nonnil<t>(list<t> l1, list<t> l2);
    requires l2 != nil;
    ensures append(l1, l2) != nil;
    
lemma void last_append<t>(list<t> l1, list<t> l2);
    requires l2 != nil;
    ensures last(append(l1, l2)) == last(l2);
 
lemma void last_snoc<t>(list<t> l, t v);
    requires true;
    ensures last(snoc(l, v)) == v;
     
lemma void last_eq(list<int> vs, list<int> vs1, int pv, int cv);
    requires cons(INT_MIN, snoc(vs, INT_MAX)) == append(vs1, cons(pv, cons(cv, nil)));
    ensures cv == INT_MAX;

lemma void remove_sorted(int v, list<int> vs);
    requires sorted(vs) == true;
    ensures sorted(remove(v, vs)) == true;
    
lemma void remove_nomem<t>(t v,  list<t> l);
    requires !mem(v, l);
    ensures remove(v, l) == l;

lemma void remove_append<t>(t v, list<t> l1, list<t> l2);
    requires !mem(v, l2);
    ensures remove(v, append(l1, l2)) == append(remove(v, l1), l2);
    
lemma void remove_helper1(int v, list<int> l);
    requires sorted(cons(INT_MIN, snoc(l, INT_MAX))) == true &*& v > INT_MIN &*& v < INT_MAX;
    ensures remove(v, cons(INT_MIN, snoc(l, INT_MAX))) == cons(INT_MIN, snoc(remove(v, l), INT_MAX));

lemma void remove_sorted_nomem(int v, int h, list<int> t);
    requires sorted(cons(h, t)) == true &*& v<h;
    ensures remove(v, cons(h,t)) == cons(h,t);

lemma void remove_helper2(int v, list<int> l1, int pv, int cv, list<int> l2);
    requires sorted(append(l1, cons(pv, cons(cv, l2)))) == true &*& pv < v &*& v < cv;
    ensures remove(v, append(l1, cons(pv, cons(cv, l2)))) == append(l1, cons(pv, cons(cv, l2)));

lemma void remove_helper3(int v, list<int> l1, int pv, int cv, list<int> l2);
    requires sorted(append(l1, cons(pv, cons(cv, l2)))) == true &*& v == cv;
    ensures remove(v, append(l1, cons(pv, cons(cv, l2)))) == append(l1, cons(pv, l2));

lemma void sorted_remove_all2_h(int v, int h, list<int> t);
    requires sorted(cons(h, t)) == true && h > v;
    ensures remove_all2(v, cons(h, t)) == cons(h, t);

lemma void sorted_remove_all2(int v, list<int> l);
    requires sorted(l) == true;
    ensures remove(v, l) == remove_all2(v, l);

lemma void remove_all2_spec<t>(t v, t v2, list<t> l);
    requires true;
    ensures mem(v2, remove_all2(v, l)) == (mem(v2, l) && v2 != v);

lemma void replace_append<t>(list<t> la, list<t> lb, t el, list<t> l2);
    requires !mem(el, la);
    ensures replace(append(la, lb), el, l2) == append(la, replace(lb, el, l2));

lemma void sorted_insert_mem_increasing(list<int> l, int v, int v2);
    requires v != v2 &*& sorted(l) == true;
    ensures mem(v2, sorted_insert(v, l)) == mem(v2, l);

#endif
